---
title: "Univariate Viz"
---

Use this file for practice with the **univariate viz** in-class activity.  Refer to the class website for details.

## Exercises

```{r}
#| eval: true

# Import data
hikes <- read.csv("https://mac-stat.github.io/data/high_peaks.csv")
```


### Exercise 1: Research Questions {.unnumbered}

Let's dig into the `hikes` data, starting with the `elevation` and difficulty `ratings` of the hikes:

```{r}
#| eval: true

head(hikes)
```

a.  What features would we like a visualization of the *categorical* difficulty `rating` variable to capture?
    How many hikes fall into each category.
b.  What about a visualization of the *quantitative* `elevation` variable?
    Order of peaks by elevation.
    

### Exercise 2: Load tidyverse {.unnumbered}

We'll address the above questions using `ggplot` tools. Try running the following chunk and simply take note of the error message -- this is one you'll get a lot!

```{r}
# Use the ggplot function
ggplot(hikes, aes(x = rating))
```

In order to use `ggplot` tools, we have to first *load* the `tidyverse` package in which they live. We've *installed* the package but we need to tell R when we want to *use* it. Run the chunk below to load the library. You'll need to do this within any .qmd file that uses `ggplot()`.

```{r}
#| eval: true
#| message: false

# Load the package
library(tidyverse)
```



### Exercise 3: Bar Chart of Ratings - Part 1 {.unnumbered}

Consider some specific research questions about the difficulty `rating` of the hikes:

1. How many hikes fall into each category?
2. Are the hikes evenly distributed among these categories, or are some more common than others?

All of these questions can be answered with: (1) a **bar chart**; of (2) the *categorical* data recorded in the `rating` column. First, set up the plotting **frame**:

```{r}
ggplot(hikes, aes(x = rating))
```

Think about:

-   What did this do? What do you observe?
  Created the framework for a bar chart with categories on the x-axis.
-   What, in general, is the first argument of the `ggplot()` function?
  Data type of individual cases being visualized.
-   What is the purpose of writing `x = rating`?
  Returns difficulty rating for each case.
-   What do you think `aes` stands for?!?
  Aesthetic


### Exercise 4: Bar Chart of Ratings - Part 2 {.unnumbered}

Now let's add a **geometric layer** to the frame / canvas, and start customizing the plot's **theme**. To this end, try each chunk below, *one by one*. In each chunk, make a comment about how both the code and the corresponding plot both changed.

NOTE:

-   Pay attention to the general code properties and structure, not memorization.
-   Not all of these are "good" plots. We're just exploring `ggplot`.

```{r}
# Adds a 'count' variable on the y-axis. Creates bars based on the number of hikes in each category.
ggplot(hikes, aes(x = rating)) +
  geom_bar()
```

```{r}
# Manually labels the x- and y- axes.
ggplot(hikes, aes(x = rating)) +
  geom_bar() +
  labs(x = "Rating", y = "Number of hikes")
```

```{r}
# Makes every bar in the graph blue.
ggplot(hikes, aes(x = rating)) +
  geom_bar(fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")
```

```{r}
# Gives each bar an orange outline.
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")
```

```{r}
# Removes the gray background.
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue")  +
  labs(x = "Rating", y = "Number of hikes") +
  theme_minimal()
```



### Exercise 5: Bar Chart Follow-up {.unnumbered}

#### Part a {.unnumbered}

Reflect on the `ggplot()` code.

-   What's the purpose of the `+`? When do we use it?
  The '+' operator combines lines of code. We use it to execute multiple lines simultaneously.
-   We added the bars using `geom_bar()`? Why "geom"?
  "Geom" stands for geometry. 'Geom_bar()' generates bar shapes.
-   What does `labs()` stand for?
  Labels
-   What's the difference between `color` and `fill`?
  'Color' determines a shape's outline color. 'Fill' determines a shape's fill color.

#### Part b {.unnumbered}

In general, bar charts allow us to examine the following properties of a *categorical* variable:

-   **observed categories**: What categories did we observe?
  Difficulty rating, number of hikes per difficulty.
-   **variability between categories**: Are observations evenly spread out among the categories, or are some categories more common than others?
  The majority of hikes are 'moderate' difficulty.

We must then *translate* this information into the *context* of our analysis, here hikes in the Adirondacks. Summarize below what you learned from the bar chart, in context.
  Out of the forty-six hikes included in this data set, most (27) were of a moderate difficulty. Some (11) were of an easy difficulty, and even less (8) were of a hard difficulty.

#### Part c {.unnumbered}

Is there anything you don't like about this barplot? For example: check out the x-axis again.
  I would prefer if the x-axis was ordered 'easy - moderate - hard' instead of 'easy - hard - moderate'.


### Exercise 6: Sad Bar Chart {.unnumbered}

Let's now consider some research questions related to the *quantitative* `elevation` variable:

1. Among the hikes, what's the *range* of elevation and how are the hikes *distributed* within this range (e.g. evenly, in clumps, "normally")?
  Range: 3820ft - 5344ft
  Relatively normal distribution.
2. What's a *typical* elevation?
  4400ft
3. Are there any *outliers*, i.e. hikes that have unusually high or low elevations?
  There are extremes in the data set but no outliers.
Here:

-   Construct a **bar chart** of the *quantitative* `elevation` variable.
-   Explain why this might *not* be an effective visualization for this and other quantitative variables. (What questions does / doesn't it help answer?)

```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_bar()
```
  This is not an effective visualization because it does not illustrate the distribution of elevation values. It simply tells us that most hikes have unique elevations, which is not interesting or relevant.


### Exercise 7: A Histogram of Elevation {.unnumbered}

Quantitative variables require different viz than categorical variables. Especially when there are many possible outcomes of the quantitative variable. It's typically insufficient to simply count up the number of times we've observed a particular outcome as the bar graph did above. It gives us a sense of ranges and typical outcomes, but not a good sense of how the observations are distributed across this range. We'll explore two methods for graphing quantitative variables: **histograms** and **density plots**.

**Histograms** are constructed by (1) dividing up the observed range of the variable into 'bins' of equal width; and (2) counting up the number of cases that fall into each bin. Check out the example below:

![](https://mac-stat.github.io/images/112/histogram_demo.png){width="50%"}

#### Part a {.unnumbered}

Let's dig into some details.

-   How many hikes have an elevation between 4500 and 4700 feet?
  Six hikes.
-   How many total hikes have an elevation of at least 5100 feet?
  Two hikes.
#### Part b {.unnumbered}

Now the bigger picture. In general, histograms allow us to examine the following properties of a *quantitative* variable:

-   **typical outcome:** Whereâ€™s the center of the data points? What's typical?
  A typical outcome lies between 4000 and 4700 ft. 4350ft is the roughly the center.
-   **variability & range:** How spread out are the outcomes? What are the max and min outcomes?
  The outcomes are spread normally. The min outcome is 3820ft and the max outcome is 5344 ft.
-   **shape:** How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)?
  The distribution is right-skewed.
-   **outliers:** Are there any outliers, i.e. outcomes that are unusually large/small?
  There are two outliers at the highest elevation value.
We must then *translate* this information into the *context* of our analysis, here hikes in the Adirondacks. Addressing each of the features in the above list, summarize below what you learned from the histogram, in context.
  According to this sample, the vast majority of hikes in the Adirondacks have an elevation between 4000 and 4700 ft.


### Exercise 8: Building Histograms - Part 1 {.unnumbered}

2-MINUTE CHALLENGE: Thinking of the bar chart code, try to *intuit* what line you can tack on to the below frame of `elevation` to add a histogram layer. Don't forget a `+`. If it doesn't come to you within 2 minutes, *no problem* -- all will be revealed in the next exercise.

```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_histogram()
```


### Exercise 9: Building Histograms - Part 2 {.unnumbered}

Let's build some histograms. Try each chunk below, *one by one*. In each chunk, make a comment about how both the code and the corresponding plot both changed.

```{r}
# Generates a histogram measuring elevation on the x-axis and number of hikes in each elevation bin on the y-axis.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram()
```

```{r}
# Creates a white outline around each bar.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white") 
```

```{r}
# Changes the fill color of each bar to blue.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", fill = "blue") 
```

```{r}
# Changes the bars to gray with white outlines. Manually labels the x- and y- axes.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white") +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```

```{r}
# Changes each bin to represent all hikes within a range of 1000 ft.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 1000) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```

```{r}
# Changes each bin to represent all hikes within a range of 5 ft.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 5) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```

```{r}
# Changes each bin to represent all hikes within a range of 200 ft.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 200) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```


### Exercise 10: Histogram Follow-up {.unnumbered}

-   What function added the histogram layer / geometry?
  The geo_histogram() function added the histogram layer.
-   What's the difference between `color` and `fill`?
  'Color' changes the outline color. 'Fill' changes the fill color.
-   Why does adding `color = "white"` improve the visualization?
  It adds white outlines to each bar, making it easier to distinguish between bins.
-   What did `binwidth` do?
  'Binwidth' changes the range of values represented by each bin.
-   Why does the histogram become ineffective if the `binwidth` is too big (e.g. 1000 feet)?
  We lose too much information about the elevation of each hike.
-   Why does the histogram become ineffective if the `binwidth` is too small (e.g. 5 feet)?
  The hikes are separated too much, making it harder to see any trend between elevation values.


### Exercise 11: Density Plots {.unnumbered}

**Density plots** are essentially smooth versions of the histogram. Instead of sorting observations into discrete bins, the "density" of observations is calculated across the entire range of outcomes. The greater the number of observations, the greater the density! The density is then scaled so that the area under the density curve **always equals 1** and the area under any fraction of the curve represents the fraction of cases that lie in that range.

Check out a density plot of elevation. Notice that the y-axis (density) has no contextual interpretation -- it's a relative measure. The *higher* the density, the more *common* are elevations in that range.

```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_density()
```

**Questions**

-   INTUITION CHECK: Before tweaking the code and thinking back to `geom_bar()` and `geom_histogram()`, how do you *anticipate* the following code will change the plot?

    -   `geom_density(color = "blue")`
    -   `geom_density(fill = "orange")`
    The line will be blue and the area under it will be filled orange.

-   TRY IT! Test out those lines in the chunk below. Was your intuition correct?
    No, the 'color' parameter had no effect on the graph.

```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_density() +
  geom_density(color = "blue") +
  geom_density(fill = "orange")
```

-   Examine the density plot. How does it compare to the histogram? What does it tell you about the *typical* elevation, *variability / range* in elevations, and *shape* of the distribution of *elevations* within this range?
  The distribution of data is much smoother in the density plot. It makes clear that the typical elevation is ~4200ft, but that there is a some variability in elevations. The shape of the distribution is similar to that of the histogram.

### Exercise 12: Density Plots vs Histograms {.unnumbered}

The histogram and density plot both allow us to visualize the behavior of a quantitative variable: typical outcome, variability / range, shape, and outliers. What are the pros/cons of each? What do you like/not like about each?
The density plot makes it easy to visualize the general trend of data, while the histogram makes it easy to understand what a typical outcome is.

### Exercise 13: Code = communication {.unnumbered}

We *obviously* won't be done until we talk about communication. All code above has a similar *general* structure (where the details can change):

```{r}
#| eval: false

ggplot(___, aes(x = ___)) + 
  geom___(color = "___", fill = "___") + 
  labs(x = "___", y = "___")
```

-   Though not *necessary* to the code working, it's common, good practice to *indent* or *tab* the lines of code after the first line (counterexample below). Why?
  It makes clear what lines are dependent on another function to run.

```{r}
# YUCK
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 200) +
labs(x = "Elevation (feet)", y = "Number of hikes")
```

-   Though not *necessary* to the code working, it's common, good practice to put a *line break* after each `+` (counterexample below). Why?
  It becomes easier to understand the different components that make up a block of code.

```{r}
# YUCK 
ggplot(hikes, aes(x = elevation)) + geom_histogram(color = "white", binwidth = 200) + labs(x = "Elevation (feet)", y = "Number of hikes")
```


### Exercise 14: Practice {.unnumbered}

#### Part a {.unnumbered}

Practice your viz skills to learn about some of the variables in one of the following datasets from the previous class:

```{r}
# Data on students in this class
survey <- read.csv("https://hash-mac.github.io/stat112site-s25/data/survey.csv")

# World Cup data
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
```
Bar chart of World Cup winners from 1930 to 2018:
```{r}
ggplot(world_cup, aes(x = winner)) +
  geom_bar(color = "white") +
  labs(x = "Nation", y = "Number of victories")
```


#### Part b {.unnumbered}

Check out the [RStudio Data Visualization cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf) to learn more features of `ggplot`.

::: {.callout-warning title="Check â†’ Commit â†’ Push"}
When done, don't forgot to click **Render Book** and check the resulting HTML files. If happy, jump to GitHub Desktop and commit the changes with the message **Finish activity 3** and push to GitHub.  Wait few seconds, then visit your portfolio website and make sure the changes are there.
:::

## Solutions

<details>

<summary>Click for Solutions</summary>

### Exercise 1: Research Questions {.unnumbered}

a.  For example: how many hikes are there in each category? are any categories more common than others?
b.  For example: What's a typical elevation? What's the range in elevations?



### Exercise 3: Bar Chart of Ratings - Part 1 {.unnumbered}

```{r}
#| eval: true

ggplot(hikes, aes(x = rating))
```

-   just a blank canvas
-   name of the dataset
-   indicate which variable to plot on x-axis
-   `aes`thetics



### Exercise 4: Bar Chart of Ratings - Part 2 {.unnumbered}

```{r}
#| eval: true

# Add a bar plot LAYER
ggplot(hikes, aes(x = rating)) +
  geom_bar()

# Add meaningful axis labels
ggplot(hikes, aes(x = rating)) +
  geom_bar() +
  labs(x = "Rating", y = "Number of hikes")

# FILL the bars with blue
ggplot(hikes, aes(x = rating)) +
  geom_bar(fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")

# COLOR the outline of the bars in orange
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")

# Change the theme to a white background
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue")  +
  labs(x = "Rating", y = "Number of hikes") + 
  theme_minimal()
```


### Exercise 5: Bar Chart Follow-up {.unnumbered}

#### Part a {.unnumbered}

-   To indicate we're still adding layers to / modifying our plot.
-   Bars are the `geom`etric elements we're adding in this layer.
-   labels
-   `fill` fills in the bars. `color` outlines the bars.

#### Part b {.unnumbered}

Most hikes are moderate, the fewest number are difficult.

#### Part c {.unnumbered}

I don't like that the categories are alphabetical, not in order of difficulty level.



### Exercise 6: Sad Bar Chart {.unnumbered}

There are too many different outcomes of elevation.

```{r}
#| eval: true

ggplot(hikes, aes(x = elevation)) + 
  geom_bar()
```



### Exercise 7: A Histogram of Elevation {.unnumbered}

#### Part a {.unnumbered}

-   6
-   1 + 1 = 2

#### Part b {.unnumbered}

Elevations range from roughly 3700 to 5500 feet. Elevations vary from hike to hike relatively *normally* (with a bell shape) around a typical elevation of roughly 4500 feet.



### Exercise 9: Building Histograms - Part 2 {.unnumbered}

```{r}
#| eval: true

# Add a histogram layer
ggplot(hikes, aes(x = elevation)) +
  geom_histogram()

# Outline the bars in white
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white") 

# Fill the bars in blue
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", fill = "blue") 

# Add axis labels
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white") +
  labs(x = "Elevation (feet)", y = "Number of hikes")

# Change the width of the bins to 1000 feet
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 1000) +
  labs(x = "Elevation (feet)", y = "Number of hikes")

# Change the width of the bins to 5 feet
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 5) +
  labs(x = "Elevation (feet)", y = "Number of hikes")

# Change the width of the bins to 200 feet
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 200) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```


### Exercise 10: Histogram Follow-up {.unnumbered}

-   `geom_histogram()`
-   `color` outlined the bars and `fill` filled them
-   easier to distinguish between the bars
-   changed the bin width
-   we lump too many hikes together and lose track of the nuances
-   we don't lump enough hikes together and lose track of the bigger picture trends


### Exercise 11: Density plots {.unnumbered}

```{r}
#| eval: true

ggplot(hikes, aes(x = elevation)) +
 geom_density(color = "blue", fill = "orange")
```


### Exercise 13: Code = Communication {.unnumbered}

-   Clarifies that the subsequent lines are a continuation of the first. That is, we're not done with the plot yet. These lines are all part of the same idea.
-   This is like a run-on sentence. It's tough to track the distinct steps that go into building the plot.


</details>
