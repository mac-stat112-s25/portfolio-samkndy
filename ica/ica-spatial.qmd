---
title: "Spatial Viz"
---

Use this file for practice with the **spatial viz** in-class activity.  Refer to the class website for details.

# Exercise 1
```{r}
library(tidyverse)
library(leaflet) # Load leaflet package
```

```{r}
fave_places <- read.csv("https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv")

# Check it out
head(fave_places)

# Just a plotting frame
leaflet(data = fave_places)
```

```{r}
# Add world map to frame
leaflet(data = fave_places) |> 
  addTiles()
```

```{r}
# Plot points in data set
# longitude and latitude refer to the variables in our data
leaflet(data = fave_places) |> 
  addTiles() |> 
  addMarkers(lng = ~longitude, lat = ~latitude)
```

# Exercise 2
```{r}
# Load package needed to change color
library(gplots)

# We can add colored circles instead of markers at each location
leaflet(data = fave_places) |> 
  addTiles() |> 
  addCircles(color = col2hex("red"))
```

```{r}
# We can change the background
# Mark locations with yellow dots
# And connect the dots, in their order in the dataset, with green lines
# (These green lines don't mean anything here, but would if this were somebody's travel path!)
leaflet(data = fave_places) |>
  addProviderTiles("USGS") |>
  addCircles(weight = 10, opacity = 1, color = col2hex("yellow")) |>
  addPolylines(
    lng = ~longitude,
    lat = ~latitude,
    color = col2hex("green")
  )

# addProviderTiles() changes the base map.
# To explore all available provider base maps, type providers in the console. (Though some don’t work :/)
# 
# Use addMarkers() or addCircles() to mark locations. Type ?addControl into the console to pull up a help file which summarizes the aesthetics of these markers and how you can change them. For example:
#         weight = how thick to make the lines, points, pixels
#         opacity = transparency (like alpha in ggplot2)
#         colors need to be in “hex” form. We used the col2hex() function from the gplots library to do that

```

# Exercise 3
```{r}
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")

# Don't worry about the syntax
starbucks_mn <- starbucks |>   
  filter(Country == "US", State.Province == "MN")
```

```{r}
leaflet(data = starbucks_mn) |> 
  addTiles() |> 
  addCircles(color = col2hex("darkgreen"))
```

```{r}
ggplot(starbucks_mn, aes(y=Latitude, x=Longitude)) +
  geom_point(alpha = 0.2, size = 0.2, color = "darkgreen")
```

# Exercise 4
```{r}
# Load the package
library(rnaturalearth)

# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")
```

```{r}
# Produces a blank static world map
# geom: simple feature format
ggplot(world_boundaries) + 
  geom_sf()
```

```{r}
# Load package needed to change map theme
library(mosaic)

# Add a point for each Starbucks
# NOTE: The Starbucks info is in our starbucks data, not world_boundaries
# geom_point used to plot points on map
ggplot(world_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3, size = 0.2, color = "darkgreen"
  ) +
  theme_map()
```

The majority of Starbucks locations are in the United States, western Europe, and east Asia. There are also locations across North and South America, and in Australia, Eastern Europe, the Middle East, and South Asia.

# Exercise 5
```{r}
# We'll learn this syntax soon! Don't worry about it now.
starbucks_cma <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))
# Gets information for background map of North America
cma_boundaries <- ne_states(
  country = c("canada", "mexico", "united states of america"),
  returnclass = "sf")

# Just the boundaries
ggplot(cma_boundaries) + 
  geom_sf()
```

```{r}
# Add the points
# And zoom in
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50)) +
  theme_map()
```

# Exercise 6
```{r}
starbucks_midwest <- starbucks |> 
  filter(State.Province %in% c("MN", "ND", "SD", "WI"))

# Load packages
library(sf)
library(maps)

# Get the boundaries
midwest_boundaries <- st_as_sf(
  maps::map("county",
            region = c("minnesota", "wisconsin", "north dakota", "south dakota"), 
            fill = TRUE, plot = FALSE))

# Check it out
head(midwest_boundaries)
```

```{r}
ggplot(midwest_boundaries) +
  geom_sf() +
  geom_point(
    data = starbucks_midwest,
    aes(x = Longitude, y = Latitude),
    alpha = 0.7,
    size = 0.2,
    color = 'darkgreen'
  ) +
  theme_map()
```

# Exercise 7
```{r}
# Creates a contour map of the starbucks_cma data
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_density_2d( # Using geom_density_2d instead of geom_point
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()
```

# Exercise 8
```{r}
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

```{r}
# Don't worry about the code!

elections_by_state <- elections_by_state |> 
  filter(state_abbr != "DC") |> 
  select(state_name, state_abbr, repub_pct_20) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(30, 70, by = 5), 
               labels = c("30-34", "35-39", "40-44", "45-49",
                          "50-54", "55-59", "60-64", "65-70"), 
               include.lowest = TRUE))

elections_by_counties <- elections_by_counties |> 
  select(state_name, state_abbr, county_name, county_fips,
          repub_pct_20, median_age, median_rent) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(0, 100, by = 10),
               labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
                          "50-59", "60-69", "70-79", "80-89", "90-100"),
               include.lowest = TRUE))
```

```{r}
# Get the latitude and longitude coordinates of state boundaries
states_map <- map_data("state")

# Check it out
head(states_map)
```

```{r}
# Note where the dataset, elections_by_state, is used
# Note where the background map, states_map, is used
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() 
```

```{r}
# Make it nicer!
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_gradientn(name = "% Republican", colors = c("blue", "purple", "red"), values = scales::rescale(seq(0, 100, by = 5)))
```

```{r}
# Discretized version
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map()
```

```{r}
# Load package needed for refining color palette
library(RColorBrewer)

# Now fix the colors
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
```

```{r}
# Overlay starbucks data on election map

# Get only the starbucks data from the US
starbucks_us <- starbucks |> 
  filter(Country == "US")

# Map it
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  geom_point(
    data = starbucks_us,
    aes(x = Longitude, y = Latitude),
    size = 0.05,
    alpha = 0.2,
    inherit.aes = FALSE
  ) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
```

We use geom_map() for choropleth maps.

# Exercise 9
```{r}
# Get the latitude and longitude coordinates of county boundaries
library(socviz)
data(county_map) 

# Check it out
head(county_map)
```

```{r}
# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long
# Don't worry about the syntax
elections_by_counties <- elections_by_counties |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))
```

```{r}
ggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +
  geom_map(map = county_map) +
  scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") + 
  coord_equal()
```

# Exercise 10
```{r}
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +
  geom_map(map = county_map) +
  scale_fill_gradientn(name = "Median Rent", colors = c("white", "violet", "purple")) +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") + 
  coord_equal()

ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +
  geom_map(map = county_map) +
  scale_fill_gradientn(name = "Median Age", colors = c("blue", "yellow", "red")) +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") + 
  coord_equal()

```
